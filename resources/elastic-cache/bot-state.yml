BotStateCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      CacheNodeType: cache.t3.micro
      Engine: redis
      NumCacheNodes: 1
      ClusterName: !Sub ${self:custom.BotStateCluster.name}
      VpcSecurityGroupIds:
        - !Ref BotStateSG
      Port: !Sub ${self:custom.BotState.fromPort}
      TransitEncryptionEnabled: true 
      Tags:
        - Key: Name
          Value: !Sub "${self:custom.base}-redis-cluster"

BotStateSG:
  Type: AWS::EC2::SecurityGroup
  Properties:
    GroupDescription: !Sub ${self:custom.BotState.BotStateSG.description}
    VpcId: !Ref MainVPC
    SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: !Sub ${self:custom.BotState.fromPort}
        ToPort: !Sub ${self:custom.BotState.toPort}
        SourceSecurityGroupId: !Ref LambdaSG  # Allow traffic from Lambda to Redis
    Tags:
      - Key: Name
        Value: !Sub "${self:custom.base}-redis-sg"


# Security Group for Lambda Function
LambdaSG:
  Type: AWS::EC2::SecurityGroup
  Properties:
    GroupName: !Sub ${self:custom.BotState.LambdaSG.name}
    GroupDescription: !Sub ${self:custom.BotState.LambdaSG.description}
    VpcId: !Ref MainVPC
    SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: !Sub ${self:custom.BotState.fromPort}
        ToPort: !Sub ${self:custom.BotState.toPort}
        CidrIp: 0.0.0.0/0
    SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: !Sub ${self:custom.BotState.fromPort}
        ToPort: !Sub ${self:custom.BotState.toPort}
        cidrIp: 0.0.0.0/0

  
# LambdaIAM: IAM permissions for the lambda
BotStateLambdaIAM:
  Effect: Allow
  Action:
    - "elasticache:DescribeCacheClusters"
    - "elasticache:Connect"
  Resource: ${self:custom.BotStateCluster.arn}