# A subnet group in the context of Amazon ElastiCache, including Redis, 
# is essentially a collection of one or more subnets within your VPC where the cache nodes can be deployed.
BotStateSubnetGroup:
  Type: AWS::ElastiCache::SubnetGroup # Group in which the Redis nodes will be deployed
  Properties:
    CacheSubnetGroupName: !Sub "${self:custom.base}-bot-state-subnet-group"
    Description: "Subnet Group needed by Redis"
    SubnetIds:
      - !Ref PrivateSubnet  # Subnet(s) to which th group belongs

BotStateCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      CacheNodeType: cache.t3.micro
      Engine: redis
      NumCacheNodes: 1
      ClusterName: !Sub ${self:custom.BotStateCluster.name}
      CacheSubnetGroupName: !Ref BotStateSubnetGroup
      VpcSecurityGroupIds:
        - !Ref BotStateSG
      Port: !Sub ${self:custom.BotState.fromPort}
      Tags:
        - Key: Name
          Value: !Sub "${self:custom.base}-redis-cluster"


BotStateSG:
  Type: AWS::EC2::SecurityGroup
  Properties:
    GroupName: !Sub "${self:custom.base}-bot-state-sg"
    GroupDescription: !Sub ${self:custom.BotState.BotStateSG.description}
    VpcId: !Ref MainVPC
    
    SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: !Sub ${self:custom.BotState.fromPort}
        ToPort: !Sub ${self:custom.BotState.toPort}
        SourceSecurityGroupId: !Ref LambdaSG  # Allow traffic from Lambda to Redis

# Security Group for Lambda Function
LambdaSG:
  Type: AWS::EC2::SecurityGroup
  Properties:
    GroupName: !Sub ${self:custom.BotState.LambdaSG.name}
    GroupDescription: !Sub ${self:custom.BotState.LambdaSG.description}
    VpcId: !Ref MainVPC
    SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: !Sub ${self:custom.BotState.fromPort}
        ToPort: !Sub ${self:custom.BotState.toPort}
        CidrIp: ${self:custom.PrivateSubnet.cidr}
    SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: !Sub ${self:custom.BotState.fromPort}
        ToPort: !Sub ${self:custom.BotState.toPort}
        cidrIp: ${self:custom.PrivateSubnet.cidr}
  
# LambdaIAM: IAM permissions for the lambda
BotStateLambdaIAM:
  Effect: Allow
  Action:
    - "elasticache:DescribeCacheClusters"
    - "elasticache:Connect"
  Resource: ${self:custom.BotStateCluster.arn}


