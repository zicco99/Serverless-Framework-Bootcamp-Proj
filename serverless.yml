service: zik-serverless-nest

plugins:
  - serverless-plugin-typescript
  - serverless-plugin-optimize
  - serverless-offline
  - serverless-iam-roles-per-function
  - serverless-plugin-warmup

provider:
  name: aws
  runtime: nodejs16.x
  memorySize: 256
  stage: ${opt:stage, 'dev'}
  region: eu-west-1

package:
  individually: true

resources:
  Resources:
    #Storage
    UsersTable: ${file(resources/UsersTable.yml):UsersTable}
    AuctionsTable: ${file(resources/AuctionsTable.yml):AuctionsTable}
    TeamsCacheTable: ${file(resources/TeamsCacheTable.yml):TeamsCacheTable}

    #Networking
    MainVPC: ${file(resources/vpc/main.yml):MainVPC}
    PrivateSubnet: ${file(resources/vpc/main.yml):PrivateSubnet}
    PrivateRouteTable: ${file(resources/vpc/main.yml):PrivateRouteTable}
    PrivateSubnetRouteTableAssociation: ${file(resources/vpc/main.yml):PrivateSubnetRouteTableAssociation}

    BotStateCluster: ${file(resources/elastic-cache/bot-state-redis.yml):BotStateCluster}
    BotStateSubnetGroup: ${file(resources/elastic-cache/bot-state-redis.yml):BotStateSubnetGroup}



functions:
  main:
    handler: src/main.handler
    memorySize: 1024 
    events:
      - http:
          method: any
          path: /{proxy+}    
    iamRoleStatements:
      - ${file(iam/AuctionsTableIAM.yml):AuctionsTableIAM}
      - ${file(iam/TeamsCacheTableIAM.yml):TeamsCacheTableIAM}
      - ${file(iam/UsersTableIAM.yml):UsersTableIAM}
      - ${file(iam/BotStateIAM.yml):BotStateIAM}
    environment:
      REGION: ${self:provider.region}
      USERS_TABLE_NAME: ${self:custom.UsersTable.name}
      TEAMS_CACHE_TABLE_NAME: ${self:custom.TeamsCacheTable.name}
      TEAMS_CACHE_TABLE_INDEX_NAME: ${self:custom.TeamsCacheTable.indexName}
      AUCTIONS_TABLE_NAME: ${self:custom.AuctionsTable.name}
      FOOTBALL_API_KEY: ${ssm:/${self:custom.base}/football-api-key}
      BOT_TELEGRAM_KEY: ${ssm:/${self:custom.base}/bot-telegram-key}
      DEFAULT_BOT_NAME: ${self:custom.base}-bot
      GATEWAY_URL: ${self:custom.APIGateway.Url}

    warmup:
      enabled: true

custom:
  base: ${self:service}-${opt:stage, 'dev'}

  #Storage
  BotStateCluster:
    name: ${self:custom.base}-bot-state-cluster
    arn: !GetAtt BotStateCluster.Arn

  UsersTable:
    name: ${self:custom.base}-users-table
    arn: !GetAtt UsersTable.Arn

  AuctionsTable:
    name: ${self:custom.base}-auctions-table
    arn: !GetAtt AuctionsTable.Arn
    indexArn: !Join ["/", ["${self:custom.AuctionsTable.arn}", "index/statusAndEndDate"]]

  TeamsCacheTable:
    name: ${self:custom.base}-teams-cache-table
    arn: !GetAtt TeamsCacheTable.Arn
    indexName: TeamNameIndex
    indexArn: !Join ["/", ["${self:custom.TeamsCacheTable.arn}", "index/${self:custom.TeamsCacheTable.indexName}"]]

  #Networking
  
  MainVPC:
    name: ${self:custom.base}-main-vpc
    cidr: 10.0.0.0/24
    enableDnsSupport: true
    enableDnsHostnames: true

  PrivateSubnet:
    name: ${self:custom.base}-private-subnet
    cidr: 10.0.0.0/26
    availabilityZone: ${self:provider.region}a

  PrivateRouteTable:
    name: ${self:custom.base}-private-route-table

  BotStateCache:
    port: 6379
    BotStateSG:
      name: ${self:custom.base}-bot-state-sg
      description: "Security group for ElastiCache Redis cluster"
      allowCidr: ${self:custom.PrivateSubnet.cidr} #Allow traffic from private subnets only

  #API
  APIGateway:
    Url:
      Fn::Join:
      - ""
      - - "https://"
        - Ref: "ApiGatewayRestApi"
        - ".execute-api."
        - ${self:provider.region}.
        - Ref: "AWS::URLSuffix"
        - "/"
        - ${self:provider.stage}
  
  
  warmup:
    enabled: false
    functions:
      main:
        enabled: true
        events:
          - schedule: rate(5 minutes)
        clientContext:
          environment:
            source: warmup-trigger
            stage: ${self:provider.stage}
        payload:
          requestType: warmup
          timestamp: ${opt:timestamp, 'now'}
        concurrency: 1